// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/Homyakadze14/AuthMicroservice/internal/entities"
	mock "github.com/stretchr/testify/mock"
)

// LinkRepo is an autogenerated mock type for the LinkRepo type
type LinkRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, link
func (_m *LinkRepo) Create(ctx context.Context, link *entities.Link) error {
	ret := _m.Called(ctx, link)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Link) error); ok {
		r0 = rf(ctx, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsActivated provides a mock function with given fields: ctx, userID
func (_m *LinkRepo) IsActivated(ctx context.Context, userID int) (bool, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for IsActivated")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (bool, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) bool); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLinkRepo creates a new instance of LinkRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLinkRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *LinkRepo {
	mock := &LinkRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
